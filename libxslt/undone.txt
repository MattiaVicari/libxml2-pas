Until now, I couldn't convert the following declarations:
---------------------------------------------------------

<from xsltinternals.h>
  (* error 
  typedef void (*xsltTransformFunction) (xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltElemPreCompPtr comp);
  in declaration at line 128 *)

  (* error 
  typedef void (*xsltElemPreCompDeallocator) (xsltElemPreCompPtr comp);
  in declaration at line 161 *)
      { 
         CHECK_STOPPED:
        
         Macro to check if the XSLT processing should be stopped
         will return from the function
        }
  (* error 
  #define CHECK_STOPPED if (ctxt->state == XSLT_STATE_STOPPED) return;
  in declaration at line 435 *)
      { 
         CHECK_STOPPEDE:
        
         Macro to check if the XSLT processing should be stopped
         will goto the error: label
        }
  (* error 
  #define CHECK_STOPPEDE if (ctxt->state == XSLT_STATE_STOPPED) goto error;
  in declaration at line 443 *)
      { 
         CHECK_STOPPED0:
        
         Macro to check if the XSLT processing should be stopped
         will return from the function with a 0 value
        }
  (* error 
  #define CHECK_STOPPED0 if (ctxt->state == XSLT_STATE_STOPPED) return(0);
  in declaration at line 451 *)

</from xsltinternals.h>

<from xslt.h>

  LIBXSLT_PUBLIC extern int xsltMaxDepth;

  /**
   * xsltEngineVersion:
   *
   * The version string for libxslt
   */
  LIBXSLT_PUBLIC extern const char *xsltEngineVersion;

  /**
   * xsltLibxsltVersion:
   *
   * The version of libxslt compiled
   */
  LIBXSLT_PUBLIC extern const int xsltLibxsltVersion;

  /**
   * xsltLibxmlVersion:
   *
   * The version of libxml libxslt was compiled against
   */
  LIBXSLT_PUBLIC extern const int xsltLibxmlVersion;

</from xslt.h>

--------------------------------------------------------------------------

<from xsltutils.h>

  the Typ FILE:
  I can't pass a var of this type to an dll.
  (shouldn't be that important, because you can use functions, that accept 
  a filename);

  /**
   * TODO:
   *
   * macro to flag unimplemented blocks
   */
  #define XSLT_TODO 							\
      xsltGenericError(xsltGenericErrorContext,				\
  	    "Unimplemented block at %s:%d\n",				\
              __FILE__, __LINE__);

  /**
   * STRANGE:
   *
   * macro to flag that a problem was detected internally
   */
  #define XSLT_STRANGE 							\
      xsltGenericError(xsltGenericErrorContext,				\
  	    "Internal error at %s:%d\n",				\
              __FILE__, __LINE__);

  /**
   * IS_XSLT_ELEM:
   *
   * Checks that the element pertains to XSLt namespace
   */
  #define IS_XSLT_ELEM(n)							\
      (((n) != NULL) && ((n)->ns != NULL) &&				\
       (xmlStrEqual((n)->ns->href, XSLT_NAMESPACE)))

  /**
   * IS_XSLT_NAME:
   *
   * Checks the value of an element in XSLT namespace
   */
  #define IS_XSLT_NAME(n, val)						\
      (xmlStrEqual((n)->name, (const xmlChar *) (val)))

  /**
   * IS_XSLT_REAL_NODE:
   *
   * check that a node is a 'real' one: document, element, text or attribute
   */
  #ifdef LIBXML_DOCB_ENABLED
  #define IS_XSLT_REAL_NODE(n)						\
      (((n) != NULL) &&							\
       (((n)->type == XML_ELEMENT_NODE) ||				\
        ((n)->type == XML_TEXT_NODE) ||					\
        ((n)->type == XML_ATTRIBUTE_NODE) ||				\
        ((n)->type == XML_DOCUMENT_NODE) ||				\
        ((n)->type == XML_HTML_DOCUMENT_NODE) ||				\
        ((n)->type == XML_DOCB_DOCUMENT_NODE)))
  #else
  #define IS_XSLT_REAL_NODE(n)						\
      (((n) != NULL) &&							\
       (((n)->type == XML_ELEMENT_NODE) ||				\
        ((n)->type == XML_TEXT_NODE) ||					\
        ((n)->type == XML_ATTRIBUTE_NODE) ||				\
        ((n)->type == XML_DOCUMENT_NODE) ||				\
        ((n)->type == XML_HTML_DOCUMENT_NODE)))
  #endif

</from xsltutils.h>

--------------------------------------------------------------------------

<from extensions.h>

  (* error 
  						 void *data);
  in declaration at line 45 *)
      { 
         xsltExtInitFunction:
         @ctxt:  an XSLT transformation context
         @URI:  the namespace URI for the extension
        
         A function called at initialization time of an XSLT extension module
        
         Returns a pointer to the module specific data for this transformation
        }

         xsltExtInitFunction = function (ctxt:xsltTransformContextPtr; URI:PxmlChar):pointer;cdecl;

  (* error 
  					 void *data);
  in declaration at line 69 *)

      function xsltRegisterExtModule(URI:PxmlChar; initFunc:xsltExtInitFunction; 
                             shutdownFunc:xsltExtShutdownFunction):longint;cdecl;external;

  (* error 
  					 xsltTransformFunction function);
  in declaration at line 119 *)

      function xsltNewElemPreComp(style:xsltStylesheetPtr; inst:xmlNodePtr;
           function:xsltTransformFunction):xsltElemPreCompPtr;cdecl;external;

  (* error 
  					 xmlNodePtr inst);
  in declaration at line 154 *)

      function xsltRegisterExtModuleTopLevel(name:PxmlChar; URI:PxmlChar; 
            function:xsltTopLevelFunction):longint;cdecl;external;

</from extensions.h>

--------------------------------------------------------------------------

<from functions.h>
    { 
       xslt_register_function_lookup:
      
       REGISTERING MACRO, NOT GENERAL PURPOSE AT ALL BUT USED IN DIFFERENT MODULES
      }
  (* ERROR 
  #DEFINE xslt_register_function_lookup(CTXT)  XMLxpATHrEGISTERfUNClOOKUP((CTXT)->XPATHcTXT,
  	(XMLxpATHfUNClOOKUPfUNC) XSLTxpATHfUNCTIONlOOKUP, (VOID *)(CTXT->XPATHcTXT));
  IN DECLARATION AT LINE 26 *)
</from functions.h>

--------------------------------------------------------------------------

<from proproc.h>
  // meines Wissens sind externe Variablen in DLL's unzulässig
  // var
       //xsltExtMarker : PxmlChar;cvar;external LIBXSLT_SO 'xsltExtMarker';
</from preproc.h>

--------------------------------------------------------------------------

<from imports.h>
  (* error 
  #define XSLT_GET_IMPORT_PTR(res, style, name) {			\
  in define line 24 *)
  (* error 
      xsltStylesheetPtr st = style;				\
   in declarator_list *)
  (* error 
      xsltStylesheetPtr st = style;				\
  (* error 
      res = NULL;							\
  in declaration at line 26 *)
  (* error 
      res = NULL;							\
  (* error 
      while (st != NULL) {					\
  in declaration at line 28 *)
  (* error 
  	if (st->name != NULL) { res = st->name; break; }	\
  in declaration at line 28 *)
  (* error 
  	if (st->name != NULL) { res = st->name; break; }	\
  in declaration at line 29 *)
  (* error 
  	st = xsltNextImport(st);				\
  (* error 
      }}
      { 
         XSLT_GET_IMPORT_INT:
        
         a macro to import intergers from the stylesheet cascading order
        }
  in define line 37 *)
  (* error 
      xsltStylesheetPtr st = style;				\
   in declarator_list *)
  (* error 
      xsltStylesheetPtr st = style;				\
  (* error 
      res = -1;							\
  in declaration at line 39 *)
  (* error 
      res = -1;							\
  (* error 
      while (st != NULL) {					\
  in declaration at line 41 *)
  (* error 
  	if (st->name != -1) { res = st->name; break; }	\
  in declaration at line 41 *)
  (* error 
  	if (st->name != -1) { res = st->name; break; }	\
  in declaration at line 42 *)
  (* error 
  	st = xsltNextImport(st);				\
  (* error 
      }}
</from imports.h> 

--------------------------------------------------------------------------

<from variables.h>
  (* error 
  #define XSLT_REGISTER_VARIABLE_LOOKUP(ctxt)			\
  in define line 28 *)
  (* error 
      xmlXPathRegisterVariableLookup((ctxt)->xpathCtxt,		\
  (* error 
      xmlXPathRegisterVariableLookup((ctxt)->xpathCtxt,		\
  (* error 
  	       xsltXPathVariableLookup,	(void *)(ctxt));	\
  (* error 
  	       xsltXPathVariableLookup,	(void *)(ctxt));	\
   in declarator_list *)
   in declarator_list *)
   in declarator_list *)
  (* error 
  	       xsltXPathVariableLookup,	(void *)(ctxt));	\
  (* error 
      xsltRegisterAllFunctions((ctxt)->xpathCtxt);		\
  in declaration at line 31 *)
  (* error 
      xsltRegisterAllFunctions((ctxt)->xpathCtxt);		\
  (* error 
      xsltRegisterAllElement(ctxt);				\
  in declaration at line 32 *)
  (* error 
      xsltRegisterAllElement(ctxt);				\
  (* error 
      (ctxt)->xpathCtxt->extra = ctxt
      {
         Interfaces for the variable module.
        }
  in declaration at line 39 *)
</from variables.h>
